/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const ViewLazyImport = createFileRoute('/view')()
const PredictionMarketLazyImport = createFileRoute('/predictionMarket')()
const MarketLazyImport = createFileRoute('/market')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const ViewLazyRoute = ViewLazyImport.update({
  id: '/view',
  path: '/view',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/view.lazy').then((d) => d.Route))

const PredictionMarketLazyRoute = PredictionMarketLazyImport.update({
  id: '/predictionMarket',
  path: '/predictionMarket',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/predictionMarket.lazy').then((d) => d.Route),
)

const MarketLazyRoute = MarketLazyImport.update({
  id: '/market',
  path: '/market',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/market.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/market': {
      id: '/market'
      path: '/market'
      fullPath: '/market'
      preLoaderRoute: typeof MarketLazyImport
      parentRoute: typeof rootRoute
    }
    '/predictionMarket': {
      id: '/predictionMarket'
      path: '/predictionMarket'
      fullPath: '/predictionMarket'
      preLoaderRoute: typeof PredictionMarketLazyImport
      parentRoute: typeof rootRoute
    }
    '/view': {
      id: '/view'
      path: '/view'
      fullPath: '/view'
      preLoaderRoute: typeof ViewLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/market': typeof MarketLazyRoute
  '/predictionMarket': typeof PredictionMarketLazyRoute
  '/view': typeof ViewLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/market': typeof MarketLazyRoute
  '/predictionMarket': typeof PredictionMarketLazyRoute
  '/view': typeof ViewLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/market': typeof MarketLazyRoute
  '/predictionMarket': typeof PredictionMarketLazyRoute
  '/view': typeof ViewLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/market' | '/predictionMarket' | '/view'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/market' | '/predictionMarket' | '/view'
  id: '__root__' | '/' | '/market' | '/predictionMarket' | '/view'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  MarketLazyRoute: typeof MarketLazyRoute
  PredictionMarketLazyRoute: typeof PredictionMarketLazyRoute
  ViewLazyRoute: typeof ViewLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  MarketLazyRoute: MarketLazyRoute,
  PredictionMarketLazyRoute: PredictionMarketLazyRoute,
  ViewLazyRoute: ViewLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/market",
        "/predictionMarket",
        "/view"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/market": {
      "filePath": "market.lazy.tsx"
    },
    "/predictionMarket": {
      "filePath": "predictionMarket.lazy.tsx"
    },
    "/view": {
      "filePath": "view.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
